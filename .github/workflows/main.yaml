name: CI

on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:
  linting:
    name: Linting
    runs-on: Ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Bootstrap poetry
        run: |
          python -m ensurepip
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Run isort
        run: poetry run isort --check imageprobe tests

      - name: Run black
        run: poetry run black --check imageprobe tests

      - name: Run mypy
        run: poetry run mypy .

      - name: Run darglint
        run: find imageprobe tests -name '*.py' | xargs poetry run darglint -v 2

      - name: Run pylint
        run: poetry run pylint --disable=fixme imageprobe tests

      - name: Run twine check
        run: |
          poetry build
          poetry run twine check dist/*

  tests:
    needs: Linting
    name: ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [Ubuntu, MacOS, Windows]
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
        exclude:
          - os: Windows
            python-version: '3.6'
            # Set PYTHONIOENCODING=utf-8 to expose the underlying issue.
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          python -m ensurepip
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Run pytest
        run: poetry run pytest --full --cov-report=xml --cov=imageprobe tests/

      - name: Upload coverage
        if: matrix.os == 'Ubuntu' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          verbose: true
